datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type OsImage {
  url         String
  source      String?
  description String?
}

model Plugin {
  id                        String         @id @default(auto()) @map("_id") @db.ObjectId
  pluginId                  String         @unique
  name                      String?
  author                    String?
  description               String?
  repo                      String
  createdAt                 Int
  nextUpdateAt              Int?
  lastCommitAt              Int?
  stargazers                Int?
  subscribers               Int?
  forks                     Int?
  latestRelease             String?
  latestReleaseDesc         String?
  latestReleaseAt           Int?
  totalDownloads            Int?
  totalIssues               Int?
  closedIssues              Int?
  openIssues                Int?
  totalPR                   Int?
  openPR                    Int?
  closedPR                  Int?
  mergedPR                  Int?
  commitCountInLastYear     Int?
  zScoreTrending            Float?
  osDescription             String?
  osCategory                String?
  osTags                    String?
  osImages                  OsImage[]
  score                     Float?
  scoreReason               String?
  website                   String?
  languages                 String?
  requirements              String[]
}

model ReleaseDownloads {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  pluginId        String         @unique
  timestamp       Int
  deltaDownload   Int
}

model DeltaDownloads {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  pluginId         String         @unique
  timestamp        Int
  deltaDownloads    Int
  totalDownloads   Int
  @@unique([pluginId, timestamp])
}

model PluginTags {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  tag              String
  pluginId         String
}

model ScoreBounds {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  metric            String         @unique
  min               Float
  max               Float
}

// Tracks pull request derived prospective (beta) plugins / themes
model PullRequestEntry {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  prNumber         Int      @unique
  prStatus         String   // open | closed | merged (GitHub PR state)
  status           String   @default("in-review") // plugin/theme promotion lifecycle: in-review | promoted | rejected
  prLabels         String?  // comma separated label names
  type             String?  // plugin | theme
  operation        String?  // add | update | delete
  repo             String?  // <author>/<repo>
  pluginId         String?
  name             String?
  version          String?
  description      String?
  author           String?
  createdAt        Int      // first seen (epoch ms)
  lastUpdatedAt    Int      // last processed (any step)
  lastClassifiedAt Int?     // last time classification step ran
  lastEnrichedAt   Int?     // last time enrichment step ran
  needManualReview Boolean  @default(false)
  manualReviewReason String? // why manual review was requested (missing fields, errors, etc.)

  @@index([prStatus])
  @@index([needManualReview])
  @@index([lastClassifiedAt])
  @@index([lastEnrichedAt])
}

/// New models for ratings and reviews system
model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  // Stable internal ID shown publicly only as pseudoname mapping
  uuid         String   @unique               // random UUID v4 upon first login
  pseudoname   String?                        // asked after first login, publicly shown
  // Google OAuth linkage (optional to allow extension to other IdPs)
  googleSub    String?  @unique
  email        String?  @unique
  createdAt    Int
  updatedAt    Int
  reviews      Review[]
}

model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  pluginId     String                        // reference to Plugin.pluginId
  pluginVersion String
  userId       String   @db.ObjectId
  rating       Int                              // 1..5
  review       String?                          // optional, up to 2048 chars
  createdAt    Int
  updatedAt    Int

  @@index([pluginId, pluginVersion])
  @@index([userId])
  @@unique([pluginId, pluginVersion, userId])    // 1 rating per user per version
}

/// Optional aggregate cache for fast listing (maintained in code)
model RatingAggregate {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  pluginId      String
  pluginVersion String
  count         Int
  sum           Int
  average       Float
  updatedAt     Int

  @@unique([pluginId, pluginVersion])
}
